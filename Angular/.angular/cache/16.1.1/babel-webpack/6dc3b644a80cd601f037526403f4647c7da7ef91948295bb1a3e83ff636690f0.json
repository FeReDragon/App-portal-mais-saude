{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../services/authentication.service\";\nclass UserHealthDataService {\n  constructor(http, authenticationService) {\n    this.http = http;\n    this.authenticationService = authenticationService;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  getVitalSigns() {\n    return this.http.get(`${this.apiUrl}/vitalSigns`);\n  }\n  getVitalSignsForUser(userId) {\n    return this.http.get(`${this.apiUrl}/vitalSigns?userId=${userId}`);\n  }\n  registerVitalSigns(vitalSigns) {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      vitalSigns.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/vitalSigns`, vitalSigns);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n  getSymptomsForUser(userId) {\n    return this.http.get(`${this.apiUrl}/symptomMonitoring?userId=${userId}`);\n  }\n  registerSymptom(symptom) {\n    return this.http.post(`${this.apiUrl}/symptomMonitoring`, symptom);\n  }\n  getMedicationsForUser(userId) {\n    return this.http.get(`${this.apiUrl}/medications?userId=${userId}`);\n  }\n  registerMedication(medication) {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      medication.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/medications`, medication);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n  getExercisesForUser(userId) {\n    return this.http.get(`${this.apiUrl}/exercises?userId=${userId}`);\n  }\n  registerExercise(exercise) {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      exercise.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/exercises`, exercise);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n  getFoodDiaryEntriesForUser(userId) {\n    return this.http.get(`${this.apiUrl}/foodDiary?userId=${userId}`);\n  }\n  registerFoodDiaryEntry(entry) {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      entry.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/foodDiary`, entry);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n  getSleepTrackerEntriesForUser(userId) {\n    return this.http.get(`${this.apiUrl}/sleepTracker?userId=${userId}`);\n  }\n  registerSleepTrackerEntry(entry) {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      entry.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/sleepTracker`, entry);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n  getVaccinationSchedulesForUser(userId) {\n    return this.http.get(`${this.apiUrl}/calendarioVacinas?userId=${userId}`);\n  }\n  registrarCalendarioVacinas(calendario) {\n    const usuarioAtual = this.authenticationService.getCurrentUser();\n    if (usuarioAtual && usuarioAtual.id) {\n      calendario.userId = usuarioAtual.id;\n      return this.http.post(`${this.apiUrl}/calendarioVacinas`, calendario);\n    } else {\n      throw new Error('Usuário atual não encontrado.');\n    }\n  }\n}\nUserHealthDataService.ɵfac = function UserHealthDataService_Factory(t) {\n  return new (t || UserHealthDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthenticationService));\n};\nUserHealthDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserHealthDataService,\n  factory: UserHealthDataService.ɵfac,\n  providedIn: 'root'\n});\nexport { UserHealthDataService };","map":{"version":3,"names":["UserHealthDataService","constructor","http","authenticationService","apiUrl","getVitalSigns","get","getVitalSignsForUser","userId","registerVitalSigns","vitalSigns","currentUser","getCurrentUser","id","post","Error","getSymptomsForUser","registerSymptom","symptom","getMedicationsForUser","registerMedication","medication","getExercisesForUser","registerExercise","exercise","getFoodDiaryEntriesForUser","registerFoodDiaryEntry","entry","getSleepTrackerEntriesForUser","registerSleepTrackerEntry","getVaccinationSchedulesForUser","registrarCalendarioVacinas","calendario","usuarioAtual","i0","ɵɵinject","i1","HttpClient","i2","AuthenticationService","factory","ɵfac","providedIn"],"sources":["/home/feredragon/Documentos/GitHub/App-portal-mais-saude/Angular/src/app/services/user-health-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Exercise, FoodDiaryEntry, Medication, SleepTrackerEntry, Symptom, Vaccination, VitalSigns } from '../interfaces/IHealt';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserHealthDataService {\n  private apiUrl = 'http://localhost:3000';\n\n  constructor(\n    private http: HttpClient,\n    private authenticationService: AuthenticationService\n  ) { }\n\n  getVitalSigns(): Observable<VitalSigns[]> {\n    return this.http.get<VitalSigns[]>(`${this.apiUrl}/vitalSigns`);\n  }\n\n  getVitalSignsForUser(userId: number): Observable<VitalSigns[]> {\n    return this.http.get<VitalSigns[]>(`${this.apiUrl}/vitalSigns?userId=${userId}`);\n  }\n\n  registerVitalSigns(vitalSigns: VitalSigns): Observable<VitalSigns> {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      vitalSigns.userId = currentUser.id;\n      return this.http.post<VitalSigns>(`${this.apiUrl}/vitalSigns`, vitalSigns);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n\n  getSymptomsForUser(userId: number): Observable<Symptom[]> {\n    return this.http.get<Symptom[]>(`${this.apiUrl}/symptomMonitoring?userId=${userId}`);\n  }\n\n  registerSymptom(symptom: Symptom): Observable<any> {\n    return this.http.post(`${this.apiUrl}/symptomMonitoring`, symptom);\n  }\n\n  getMedicationsForUser(userId: number): Observable<Medication[]> {\n    return this.http.get<Medication[]>(`${this.apiUrl}/medications?userId=${userId}`);\n  }\n\n  registerMedication(medication: Medication): Observable<any> {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      medication.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/medications`, medication);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n\n  getExercisesForUser(userId: number): Observable<Exercise[]> {\n    return this.http.get<Exercise[]>(`${this.apiUrl}/exercises?userId=${userId}`);\n  }\n\n  registerExercise(exercise: Exercise): Observable<any> {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      exercise.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/exercises`, exercise);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n\n  getFoodDiaryEntriesForUser(userId: number): Observable<FoodDiaryEntry[]> {\n    return this.http.get<FoodDiaryEntry[]>(`${this.apiUrl}/foodDiary?userId=${userId}`);\n  }\n  \n  registerFoodDiaryEntry(entry: FoodDiaryEntry): Observable<any> {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      entry.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/foodDiary`, entry);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n  \n  getSleepTrackerEntriesForUser(userId: number): Observable<SleepTrackerEntry[]> {\n    return this.http.get<SleepTrackerEntry[]>(`${this.apiUrl}/sleepTracker?userId=${userId}`);\n  }\n  \n  registerSleepTrackerEntry(entry: SleepTrackerEntry): Observable<any> {\n    const currentUser = this.authenticationService.getCurrentUser();\n    if (currentUser && currentUser.id) {\n      entry.userId = currentUser.id;\n      return this.http.post(`${this.apiUrl}/sleepTracker`, entry);\n    } else {\n      throw new Error('Current user not found.');\n    }\n  }\n\n  getVaccinationSchedulesForUser(userId: number): Observable<Vaccination[]> {\n    return this.http.get<Vaccination[]>(`${this.apiUrl}/calendarioVacinas?userId=${userId}`);\n  }\n\n  registrarCalendarioVacinas(calendario: Vaccination): Observable<Vaccination> {\n    const usuarioAtual = this.authenticationService.getCurrentUser();\n    if (usuarioAtual && usuarioAtual.id) {\n      calendario.userId = usuarioAtual.id;\n      return this.http.post<Vaccination>(`${this.apiUrl}/calendarioVacinas`, calendario);\n    } else {\n      throw new Error('Usuário atual não encontrado.');\n    }\n  }\n  \n  // other methods...\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}