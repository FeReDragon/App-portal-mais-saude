{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/users';\n    const currentUserString = localStorage.getItem('currentUser');\n    this.currentUser = currentUserString ? JSON.parse(currentUserString) : null;\n  }\n  login(username, password) {\n    return this.http.get(this.apiUrl).pipe(map(users => {\n      const user = users.find(u => u.name === username && u.password === password);\n      if (user !== undefined) {\n        this.currentUser = user;\n        localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n        return true;\n      } else {\n        return false;\n      }\n    }), catchError(() => {\n      return throwError('Credenciais inválidas. Por favor, tente novamente.');\n    }));\n  }\n  register(userData) {\n    return this.http.post(this.apiUrl, userData).pipe(map(response => {\n      this.currentUser = {\n        id: response.id,\n        username: response.username,\n        name: response.name,\n        password: response.password,\n        birthday: response.birthday,\n        email: response.email\n      };\n      localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n      return true;\n    }), catchError(error => {\n      console.error('Erro ao registrar usuário:', error);\n      return throwError('Erro ao registrar usuário. Por favor, tente novamente.');\n    }));\n  }\n  logout() {\n    this.currentUser = null;\n    localStorage.removeItem('currentUser');\n  }\n  isAuthenticated() {\n    return !!this.currentUser;\n  }\n  getCurrentUser() {\n    return this.currentUser;\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthenticationService };","map":{"version":3,"names":["throwError","catchError","map","AuthenticationService","constructor","http","apiUrl","currentUserString","localStorage","getItem","currentUser","JSON","parse","login","username","password","get","pipe","users","user","find","u","name","undefined","setItem","stringify","register","userData","post","response","id","birthday","email","error","console","logout","removeItem","isAuthenticated","getCurrentUser","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/feredragon/Documentos/GitHub/App-portal-mais-saude/Angular/src/app/services/authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { User } from '../interfaces/IUsuario';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  private apiUrl = 'http://localhost:3000/users';\n  private currentUser: User | null;\n\n  constructor(private http: HttpClient) {\n    const currentUserString = localStorage.getItem('currentUser');\n    this.currentUser = currentUserString ? JSON.parse(currentUserString) : null;\n  }\n\n  login(username: string, password: string): Observable<boolean> {\n    return this.http.get<User[]>(this.apiUrl).pipe(\n      map(users => {\n        const user = users.find(u => u.name === username && u.password === password);\n        if (user !== undefined) {\n          this.currentUser = user;\n          localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n          return true;\n        } else {\n          return false;\n        }\n      }),\n      catchError(() => {\n        return throwError('Credenciais inválidas. Por favor, tente novamente.');\n      })\n    );\n  }\n\n\nregister(userData: Omit<User, 'id'>): Observable<boolean> {\n  return this.http.post<User>(this.apiUrl, userData).pipe(\n    map((response: User) => {\n      this.currentUser = {\n        id: response.id,\n        username: response.username,  // adiciona isto\n        name: response.name,\n        password: response.password,\n        birthday: response.birthday,\n        email: response.email\n      };\n      localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n      return true;\n    }),\n    catchError(error => {\n      console.error('Erro ao registrar usuário:', error);\n      return throwError('Erro ao registrar usuário. Por favor, tente novamente.');\n    })\n  );\n}\n\n\n  logout(): void {\n    this.currentUser = null;\n    localStorage.removeItem('currentUser');\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.currentUser;\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUser;\n  }\n}\n\nexport { User };\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAa,gBAAgB;;;AAGrD,MAGaC,qBAAqB;EAIhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,6BAA6B;IAI5C,MAAMC,iBAAiB,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAC7D,IAAI,CAACC,WAAW,GAAGH,iBAAiB,GAAGI,IAAI,CAACC,KAAK,CAACL,iBAAiB,CAAC,GAAG,IAAI;EAC7E;EAEAM,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAS,IAAI,CAACV,MAAM,CAAC,CAACW,IAAI,CAC5Cf,GAAG,CAACgB,KAAK,IAAG;MACV,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKR,QAAQ,IAAIO,CAAC,CAACN,QAAQ,KAAKA,QAAQ,CAAC;MAC5E,IAAII,IAAI,KAAKI,SAAS,EAAE;QACtB,IAAI,CAACb,WAAW,GAAGS,IAAI;QACvBX,YAAY,CAACgB,OAAO,CAAC,aAAa,EAAEb,IAAI,CAACc,SAAS,CAAC,IAAI,CAACf,WAAW,CAAC,CAAC;QACrE,OAAO,IAAI;OACZ,MAAM;QACL,OAAO,KAAK;;IAEhB,CAAC,CAAC,EACFT,UAAU,CAAC,MAAK;MACd,OAAOD,UAAU,CAAC,oDAAoD,CAAC;IACzE,CAAC,CAAC,CACH;EACH;EAGF0B,QAAQA,CAACC,QAA0B;IACjC,OAAO,IAAI,CAACtB,IAAI,CAACuB,IAAI,CAAO,IAAI,CAACtB,MAAM,EAAEqB,QAAQ,CAAC,CAACV,IAAI,CACrDf,GAAG,CAAE2B,QAAc,IAAI;MACrB,IAAI,CAACnB,WAAW,GAAG;QACjBoB,EAAE,EAAED,QAAQ,CAACC,EAAE;QACfhB,QAAQ,EAAEe,QAAQ,CAACf,QAAQ;QAC3BQ,IAAI,EAAEO,QAAQ,CAACP,IAAI;QACnBP,QAAQ,EAAEc,QAAQ,CAACd,QAAQ;QAC3BgB,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;QAC3BC,KAAK,EAAEH,QAAQ,CAACG;OACjB;MACDxB,YAAY,CAACgB,OAAO,CAAC,aAAa,EAAEb,IAAI,CAACc,SAAS,CAAC,IAAI,CAACf,WAAW,CAAC,CAAC;MACrE,OAAO,IAAI;IACb,CAAC,CAAC,EACFT,UAAU,CAACgC,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOjC,UAAU,CAAC,wDAAwD,CAAC;IAC7E,CAAC,CAAC,CACH;EACH;EAGEmC,MAAMA,CAAA;IACJ,IAAI,CAACzB,WAAW,GAAG,IAAI;IACvBF,YAAY,CAAC4B,UAAU,CAAC,aAAa,CAAC;EACxC;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAAC3B,WAAW;EAC3B;EAEA4B,cAAcA,CAAA;IACZ,OAAO,IAAI,CAAC5B,WAAW;EACzB;;AA7DWP,qBAAqB,C;mBAArBA,qBAAqB,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAArBvC,qBAAqB,C;SAArBA,qBAAqB;EAAAwC,OAAA,EAArBxC,qBAAqB,CAAAyC,IAAA;EAAAC,UAAA,EAFpB;AAAM;SAEP1C,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}